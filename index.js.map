{"version":3,"file":"index.js","sources":["src/StateMachine.js"],"sourcesContent":["const INITIAL_STATE = 1;\nconst FAIL_STATE = 0;\n\n/**\n * A StateMachine represents a deterministic finite automaton.\n * It can perform matches over a sequence of values, similar to a regular expression.\n * zilahir - modification\n */\nexport default class StateMachine {\n  constructor(dfa) {\n    this.stateTable = dfa.stateTable;\n    this.accepting = dfa.accepting;\n    this.tags = dfa.tags;\n  }\n\n  /**\n   * Returns an iterable object that yields pattern matches over the input sequence.\n   * Matches are of the form [startIndex, endIndex, tags].\n   */\n  match(str) {\n    let self = this;\n    return {\n      *[Symbol.iterator]() {\n        let state = INITIAL_STATE;\n        let startRun = null;\n        let lastAccepting = null;\n        let lastState = null;\n\n        for (let p = 0; p < str.length; p++) {\n          let c = str[p];\n\n          lastState = state;\n          state = self.stateTable[state][c];\n\n          if (state === FAIL_STATE) {\n            // yield the last match if any\n            if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n              yield [startRun, lastAccepting, self.tags[lastState]];\n            }\n\n            // reset the state as if we started over from the initial state\n            state = self.stateTable[INITIAL_STATE][c];\n            startRun = null;\n          }\n\n          // start a run if not in the failure state\n          if (state !== FAIL_STATE && startRun == null) {\n            startRun = p;\n          }\n\n          // if accepting, mark the potential match end\n          if (self.accepting[state]) {\n            lastAccepting = p;\n          }\n\n          // reset the state to the initial state if we get into the failure state\n          if (state === FAIL_STATE) {\n            state = INITIAL_STATE;\n          }\n        }\n\n        // yield the last match if any\n        if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n          yield [startRun, lastAccepting, self.tags[state]];\n        }\n      }\n    };\n  }\n\n  /**\n   * For each match over the input sequence, action functions matching\n   * the tag definitions in the input pattern are called with the startIndex,\n   * endIndex, and sub-match sequence.\n   */\n  apply(str, actions) {\n    for (let [start, end, tags] of this.match(str)) {\n      for (let tag of tags) {\n        if (typeof actions[tag] === 'function') {\n          actions[tag](start, end, str.slice(start, end + 1));\n        }\n      }\n    }\n  }\n}\n"],"names":["INITIAL_STATE","FAIL_STATE","StateMachine","dfa","stateTable","accepting","tags","str","self","Symbol","iterator","state","startRun","lastAccepting","lastState","p","length","c","actions","match","start","end","tag","slice"],"mappings":"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"}