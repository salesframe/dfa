{"version":3,"file":"compile.js","sources":["src/utils.js","src/nodes.js","src/grammar.js","src/SymbolTable.js","src/dfa.js","src/StateMachine.js","src/compile.js"],"sourcesContent":["/**\n * Returns a new set representing the union of a and b.\n */\nexport function union(a, b) {\n  let s = new Set(a);\n  addAll(s, b);\n  return s;\n}\n\n/**\n * Adds all items from the set b to a.\n */\nexport function addAll(a, b) {\n  for (let x of b) {\n    a.add(x);\n  }\n}\n\n/**\n * Returns whether two sets are equal\n */\nexport function equal(a, b) {\n  if (a === b)\n    return true;\n\n  if (a.size !== b.size)\n    return false;\n\n  for (let x of a) {\n    if (!b.has(x)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {addAll, union} from './utils';\n\n/**\n * Base AST node\n */\nexport class Node {\n  constructor() {\n    Object.defineProperty(this, 'followpos', {value: new Set})\n  }\n\n  calcFollowpos() {\n    for (let key in this) {\n      if (this[key] instanceof Node) {\n        this[key].calcFollowpos();\n      }\n    }\n  }\n}\n\n/**\n * Represents a variable reference\n */\nexport class Variable extends Node {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n\n  copy() {\n    return new Variable(this.name);\n  }\n}\n\n/**\n * Represents a comment\n */\nexport class Comment extends Node {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n}\n\n/**\n * Represents an assignment statement.\n * e.g. `variable = expression;`\n */\nexport class Assignment extends Node {\n  constructor(variable, expression) {\n    super();\n    this.variable = variable;\n    this.expression = expression;\n  }\n}\n\n/**\n * Represents an alternation.\n * e.g. `a | b`\n */\nexport class Alternation extends Node {\n  constructor(a, b) {\n    super();\n    this.a = a;\n    this.b = b;\n  }\n\n  get nullable() {\n    return this.a.nullable || this.b.nullable;\n  }\n\n  get firstpos() {\n    return union(this.a.firstpos, this.b.firstpos);\n  }\n\n  get lastpos() {\n    return union(this.a.lastpos, this.b.lastpos);\n  }\n\n  copy() {\n    return new Alternation(this.a.copy(), this.b.copy());\n  }\n}\n\n/**\n * Represents a concatenation, or chain.\n * e.g. `a b c`\n */\nexport class Concatenation extends Node {\n  constructor(a, b) {\n    super();\n    this.a = a;\n    this.b = b;\n  }\n\n  get nullable() {\n    return this.a.nullable && this.b.nullable;\n  }\n\n  get firstpos() {\n    let s = this.a.firstpos;\n    if (this.a.nullable) {\n      s = union(s, this.b.firstpos);\n    }\n\n    return s;\n  }\n\n  get lastpos() {\n    let s = this.b.lastpos;\n    if (this.b.nullable) {\n      s = union(s, this.a.lastpos);\n    }\n\n    return s;\n  }\n\n  calcFollowpos() {\n    super.calcFollowpos();\n    for (let n of this.a.lastpos) {\n      addAll(n.followpos, this.b.firstpos);\n    }\n  }\n\n  copy() {\n    return new Concatenation(this.a.copy(), this.b.copy());\n  }\n}\n\n/**\n * Represents a repetition.\n * e.g. `a+`, `b*`, or `c?`\n */\nexport class Repeat extends Node {\n  constructor(expression, op) {\n    super();\n    this.expression = expression;\n    this.op = op;\n  }\n\n  get nullable() {\n    return this.op === '*' || this.op === '?';\n  }\n\n  get firstpos() {\n    return this.expression.firstpos;\n  }\n\n  get lastpos() {\n    return this.expression.lastpos;\n  }\n\n  calcFollowpos() {\n    super.calcFollowpos();\n    if (this.op === '*' || this.op === '+') {\n      for (let n of this.lastpos) {\n        addAll(n.followpos, this.firstpos);\n      }\n    }\n  }\n\n  copy() {\n    return new Repeat(this.expression.copy(), this.op);\n  }\n}\n\nexport function buildRepetition(expression, min = 0, max = Infinity) {\n  if (min < 0 || min > max) {\n    throw new Error(`Invalid repetition range: ${min} ${max}`);\n  }\n\n  let res = null;\n  for (let i = 0; i < min; i++) {\n    res = concat(res, expression.copy());\n  }\n\n  if (max === Infinity) {\n    res = concat(res, new Repeat(expression.copy(), '*'));\n  } else {\n    for (let i = min; i < max; i++) {\n      res = concat(res, new Repeat(expression.copy(), '?'))\n    }\n  }\n\n  return res;\n}\n\nfunction concat(a, b) {\n  if (!a) {\n    return b;\n  }\n\n  return new Concatenation(a, b);\n}\n\n/**\n * Base class for leaf nodes\n */\nclass Leaf extends Node {\n  get nullable() {\n    return false;\n  }\n\n  get firstpos() {\n    return new Set([this]);\n  }\n\n  get lastpos() {\n    return new Set([this]);\n  }\n}\n\n/**\n * Represents a literal value, e.g. a number\n */\nexport class Literal extends Leaf {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  copy() {\n    return new Literal(this.value);\n  }\n}\n\n/**\n * Marks the end of an expression\n */\nexport class EndMarker extends Leaf {}\n\n/**\n * Represents a tag\n * e.g. `a:(a b)`\n */\nexport class Tag extends Leaf {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n\n  get nullable() {\n    return true;\n  }\n\n  copy() {\n    return new Tag(this.name);\n  }\n}\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { rules: peg$parserules },\n      peg$startRuleFunction  = peg$parserules,\n\n      peg$c0 = function(s) { return s },\n      peg$c1 = \"#\",\n      peg$c2 = peg$literalExpectation(\"#\", false),\n      peg$c3 = /^[^\\r\\n]/,\n      peg$c4 = peg$classExpectation([\"\\r\", \"\\n\"], true, false),\n      peg$c5 = /^[\\r\\n]/,\n      peg$c6 = peg$classExpectation([\"\\r\", \"\\n\"], false, false),\n      peg$c7 = function(v) { return new n.Comment(v.join('')) },\n      peg$c8 = \"=\",\n      peg$c9 = peg$literalExpectation(\"=\", false),\n      peg$c10 = \";\",\n      peg$c11 = peg$literalExpectation(\";\", false),\n      peg$c12 = function(v, e) { return new n.Assignment(v, e) },\n      peg$c13 = function(v) { return new n.Variable(v) },\n      peg$c14 = \"|\",\n      peg$c15 = peg$literalExpectation(\"|\", false),\n      peg$c16 = function(a, b) { return new n.Alternation(a, b) },\n      peg$c17 = function(a, b) { return new n.Concatenation(a, b) },\n      peg$c18 = \":\",\n      peg$c19 = peg$literalExpectation(\":\", false),\n      peg$c20 = function(t, e) { return new n.Concatenation(e, new n.Tag(t)) },\n      peg$c21 = \"*\",\n      peg$c22 = peg$literalExpectation(\"*\", false),\n      peg$c23 = function(t) { return new n.Repeat(t, '*') },\n      peg$c24 = \"?\",\n      peg$c25 = peg$literalExpectation(\"?\", false),\n      peg$c26 = function(t) { return new n.Repeat(t, '?') },\n      peg$c27 = \"+\",\n      peg$c28 = peg$literalExpectation(\"+\", false),\n      peg$c29 = function(t) { return new n.Repeat(t, '+') },\n      peg$c30 = \"{\",\n      peg$c31 = peg$literalExpectation(\"{\", false),\n      peg$c32 = \"}\",\n      peg$c33 = peg$literalExpectation(\"}\", false),\n      peg$c34 = function(t, m) { return n.buildRepetition(t, m, m) },\n      peg$c35 = \",\",\n      peg$c36 = peg$literalExpectation(\",\", false),\n      peg$c37 = function(t, min) { return n.buildRepetition(t, min, Infinity) },\n      peg$c38 = function(t, max) { return n.buildRepetition(t, 0, max) },\n      peg$c39 = function(t, min, max) { return n.buildRepetition(t, min, max) },\n      peg$c40 = function(x) { return new n.Literal(x) },\n      peg$c41 = \"(\",\n      peg$c42 = peg$literalExpectation(\"(\", false),\n      peg$c43 = \")\",\n      peg$c44 = peg$literalExpectation(\")\", false),\n      peg$c45 = function(e) { return e },\n      peg$c46 = function() { return n.buildRepetition() },\n      peg$c47 = function(a, b) { return a + b.join('') },\n      peg$c48 = \"_\",\n      peg$c49 = peg$literalExpectation(\"_\", false),\n      peg$c50 = /^[a-zA-Z]/,\n      peg$c51 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false),\n      peg$c52 = /^[0-9]/,\n      peg$c53 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c54 = function(num) { return parseInt(num.join('')) },\n      peg$c55 = /^[ \\t\\r\\n]/,\n      peg$c56 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parserules() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsestatement();\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsestatement();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestatement() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestatement_type();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestatement_type() {\n    var s0;\n\n    s0 = peg$parseassignment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecomment();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c1;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c2); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c3.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c4); }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (peg$c3.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (peg$c5.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c7(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseassignment() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevariable();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c8;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c9); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealternation();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 59) {\n                  s7 = peg$c10;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c11); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c12(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevariable() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsename();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c13(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsealternation() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconcatenation();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 124) {\n          s3 = peg$c14;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealternation();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c16(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseconcatenation();\n    }\n\n    return s0;\n  }\n\n  function peg$parseconcatenation() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parserepeat();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseconcatenation();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c17(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parserepeat();\n    }\n\n    return s0;\n  }\n\n  function peg$parserepeat() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsename();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 58) {\n        s2 = peg$c18;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c19); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parserepeat();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c20(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseterm();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 42) {\n          s2 = peg$c21;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c22); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c23(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseterm();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 63) {\n            s2 = peg$c24;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c25); }\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c26(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseterm();\n          if (s1 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s2 = peg$c27;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c28); }\n            }\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c29(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseterm();\n            if (s1 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 123) {\n                s2 = peg$c30;\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c31); }\n              }\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parsenumber();\n                if (s3 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s4 = peg$c32;\n                    peg$currPos++;\n                  } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                  }\n                  if (s4 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c34(s1, s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseterm();\n              if (s1 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 123) {\n                  s2 = peg$c30;\n                  peg$currPos++;\n                } else {\n                  s2 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                }\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parsenumber();\n                  if (s3 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s4 = peg$c35;\n                      peg$currPos++;\n                    } else {\n                      s4 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                    }\n                    if (s4 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 125) {\n                        s5 = peg$c32;\n                        peg$currPos++;\n                      } else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                      }\n                      if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c37(s1, s3);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parseterm();\n                if (s1 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 123) {\n                    s2 = peg$c30;\n                    peg$currPos++;\n                  } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                  }\n                  if (s2 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s3 = peg$c35;\n                      peg$currPos++;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                    }\n                    if (s3 !== peg$FAILED) {\n                      s4 = peg$parsenumber();\n                      if (s4 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s5 = peg$c32;\n                          peg$currPos++;\n                        } else {\n                          s5 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                        }\n                        if (s5 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c38(s1, s4);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parseterm();\n                  if (s1 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                      s2 = peg$c30;\n                      peg$currPos++;\n                    } else {\n                      s2 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                    }\n                    if (s2 !== peg$FAILED) {\n                      s3 = peg$parsenumber();\n                      if (s3 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                          s4 = peg$c35;\n                          peg$currPos++;\n                        } else {\n                          s4 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                        }\n                        if (s4 !== peg$FAILED) {\n                          s5 = peg$parsenumber();\n                          if (s5 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 125) {\n                              s6 = peg$c32;\n                              peg$currPos++;\n                            } else {\n                              s6 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                            }\n                            if (s6 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c39(s1, s3, s5);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseterm();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseterm() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$parsevariable();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsenumber();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c40(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s1 = peg$c41;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c42); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsealternation();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s3 = peg$c43;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c44); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c45(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parserepetition() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c30;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s3 = peg$c32;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c33); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c46();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsename() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsename_start_char();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsename_char();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsename_char();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c47(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsename_start_char() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 95) {\n      s0 = peg$c48;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c49); }\n    }\n    if (s0 === peg$FAILED) {\n      if (peg$c50.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c51); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsename_char() {\n    var s0;\n\n    s0 = peg$parsename_start_char();\n    if (s0 === peg$FAILED) {\n      if (peg$c52.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c53); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c52.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c53); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c52.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c53); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c54(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    s0 = [];\n    if (peg$c55.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c56); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c55.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c56); }\n      }\n    }\n\n    return s0;\n  }\n\n\n    var n = require('./nodes');\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","import {Assignment, Literal, Node, Variable} from './nodes';\n\n/**\n * Processes a list of statements into a symbol table\n */\nexport default class SymbolTable {\n  constructor(statements, externalSymbols = {}) {\n    this.variables = {};\n    this.symbols = {};\n    this.main = null;\n    this.size = 0;\n\n    this.addExternalSymbols(externalSymbols);\n    this.process(statements);\n  }\n\n  addExternalSymbols(externalSymbols) {\n    for (let key in externalSymbols) {\n      this.variables[key] = new Literal(externalSymbols[key]);\n      this.symbols[key] = externalSymbols[key];\n      this.size++;\n    }\n  }\n\n  process(statements) {\n    for (let statement of statements) {\n      if (statement instanceof Assignment) {\n        this.variables[statement.variable.name] = this.processExpression(statement.expression);\n\n        if (statement.expression instanceof Literal) {\n          this.symbols[statement.variable.name] = statement.expression.value;\n          this.size++;\n        }\n      }\n    }\n\n    this.main = this.variables.main;\n    if (!this.main) {\n      throw new Error('No main variable declaration found');\n    }\n  }\n\n  processExpression(expr) {\n    // Process children\n    for (let key in expr) {\n      if (expr[key] instanceof Node) {\n        expr[key] = this.processExpression(expr[key]);\n      }\n    }\n\n    // Replace variable references with their values\n    if (expr instanceof Variable) {\n      let value = this.variables[expr.name];\n      if (value == null)\n        throw new Error(`Undeclared indentifier ${expr.name}`);\n\n      expr = this.processExpression(value.copy());\n    }\n\n    return expr;\n  }\n}\n","import {EndMarker, Concatenation, Literal, Tag} from './nodes';\nimport {addAll, equal} from './utils';\n\nconst END_MARKER = new EndMarker;\n\n/**\n * This is an implementation of the direct regular expression to DFA algorithm described\n * in section 3.9.5 of \"Compilers: Principles, Techniques, and Tools\" by Aho,\n * Lam, Sethi, and Ullman. http://dragonbook.stanford.edu\n * There is a PDF of the book here:\n * http://www.informatik.uni-bremen.de/agbkb/lehre/ccfl/Material/ALSUdragonbook.pdf\n */\nexport default function buildDFA(root, numSymbols) {\n  root = new Concatenation(root, END_MARKER);\n  root.calcFollowpos();\n\n  let failState = new State(new Set, numSymbols);\n  let initialState = new State(root.firstpos, numSymbols);\n  let dstates = [failState, initialState];\n\n  // while there is an unmarked state S in dstates\n  while (1) {\n    let s = null;\n\n    for (let j = 1; j < dstates.length; j++) {\n      if (!dstates[j].marked) {\n        s = dstates[j];\n        break;\n      }\n    }\n\n    if (s == null) {\n      break;\n    }\n\n    // mark S\n    s.marked = true;\n\n    // for each input symbol a\n    for (let a = 0; a < numSymbols; a++) {\n      // let U be the union of followpos(p) for all\n      //  p in S that correspond to a\n      let u = new Set;\n      for (let p of s.positions) {\n        if (p instanceof Literal && p.value === a) {\n          addAll(u, p.followpos);\n        }\n      }\n\n      if (u.size === 0) {\n        continue;\n      }\n\n      // if U is not in dstates\n      let ux = -1;\n      for (let i = 0; i < dstates.length; i++) {\n        if (equal(u, dstates[i].positions)) {\n          ux = i;\n          break;\n        }\n      }\n\n      if (ux === -1) {\n        // Add U as an unmarked state to dstates\n        dstates.push(new State(u, numSymbols));\n        ux = dstates.length - 1;\n      }\n\n      s.transitions[a] = ux;\n    }\n  }\n\n  return dstates;\n}\n\nclass State {\n  constructor(positions, len) {\n    this.positions = positions;\n    this.transitions = new Uint16Array(len);\n    this.accepting = positions.has(END_MARKER);\n    this.marked = false;\n    this.tags = new Set;\n\n    for (let pos of positions) {\n      if (pos instanceof Tag) {\n        this.tags.add(pos.name);\n      }\n    }\n  }\n}\n","const INITIAL_STATE = 1;\nconst FAIL_STATE = 0;\n\n/**\n * A StateMachine represents a deterministic finite automaton.\n * It can perform matches over a sequence of values, similar to a regular expression.\n * zilahir - modification\n */\nexport default class StateMachine {\n  constructor(dfa) {\n    this.stateTable = dfa.stateTable;\n    this.accepting = dfa.accepting;\n    this.tags = dfa.tags;\n  }\n\n  /**\n   * Returns an iterable object that yields pattern matches over the input sequence.\n   * Matches are of the form [startIndex, endIndex, tags].\n   */\n  match(str) {\n    let self = this;\n    return {\n      *[Symbol.iterator]() {\n        let state = INITIAL_STATE;\n        let startRun = null;\n        let lastAccepting = null;\n        let lastState = null;\n\n        for (let p = 0; p < str.length; p++) {\n          let c = str[p];\n\n          lastState = state;\n          state = self.stateTable[state][c];\n\n          if (state === FAIL_STATE) {\n            // yield the last match if any\n            if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n              yield [startRun, lastAccepting, self.tags[lastState]];\n            }\n\n            // reset the state as if we started over from the initial state\n            state = self.stateTable[INITIAL_STATE][c];\n            startRun = null;\n          }\n\n          // start a run if not in the failure state\n          if (state !== FAIL_STATE && startRun == null) {\n            startRun = p;\n          }\n\n          // if accepting, mark the potential match end\n          if (self.accepting[state]) {\n            lastAccepting = p;\n          }\n\n          // reset the state to the initial state if we get into the failure state\n          if (state === FAIL_STATE) {\n            state = INITIAL_STATE;\n          }\n        }\n\n        // yield the last match if any\n        if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n          yield [startRun, lastAccepting, self.tags[state]];\n        }\n      }\n    };\n  }\n\n  /**\n   * For each match over the input sequence, action functions matching\n   * the tag definitions in the input pattern are called with the startIndex,\n   * endIndex, and sub-match sequence.\n   */\n  apply(str, actions) {\n    for (let [start, end, tags] of this.match(str)) {\n      for (let tag of tags) {\n        if (typeof actions[tag] === 'function') {\n          actions[tag](start, end, str.slice(start, end + 1));\n        }\n      }\n    }\n  }\n}\n","import grammar from './grammar';\nimport SymbolTable from './SymbolTable';\nimport buildDFA from './dfa';\nimport StateMachine from './StateMachine';\n\nexport function parse(string, externalSymbols) {\n  let ast = grammar.parse(string);\n  return new SymbolTable(ast, externalSymbols);\n}\n\nexport function build(symbolTable) {\n  let states = buildDFA(symbolTable.main, symbolTable.size);\n\n  return new StateMachine({\n    stateTable: states.map(s => Array.from(s.transitions)),\n    accepting: states.map(s => s.accepting),\n    tags: states.map(s => Array.from(s.tags))\n  });\n}\n\nexport default function compile(string, externalSymbols) {\n  return build(parse(string, externalSymbols));\n}\n"],"names":["union","a","b","s","Set","addAll","x","add","equal","size","has","Node","Object","defineProperty","value","key","calcFollowpos","Variable","name","Comment","Assignment","variable","expression","Alternation","copy","nullable","firstpos","lastpos","Concatenation","n","followpos","Repeat","op","buildRepetition","min","max","Infinity","Error","res","i","concat","Leaf","Literal","EndMarker","Tag","peg$subclass","child","parent","ctor","constructor","prototype","peg$SyntaxError","message","expected","found","location","captureStackTrace","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","describeExpectation","type","describeExpected","descriptions","j","sort","slice","join","describeFound","peg$parse","input","options","peg$FAILED","peg$startRuleFunctions","rules","peg$parserules","peg$startRuleFunction","peg$c0","peg$c1","peg$c2","peg$literalExpectation","peg$c3","peg$c4","peg$classExpectation","peg$c5","peg$c6","peg$c7","v","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","e","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","peg$c20","t","peg$c21","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","m","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","num","parseInt","peg$c55","peg$c56","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","ignoreCase","peg$endExpectation","peg$computePosDetails","pos","details","p","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","start","offset","peg$fail","push","peg$buildStructuredError","s0","s1","peg$parsestatement","s2","peg$parsestatement_type","peg$parse_","peg$parseassignment","peg$parsecomment","s3","test","charAt","s4","s5","s6","s7","peg$parsevariable","peg$parsealternation","peg$parsename","peg$parseconcatenation","peg$parserepeat","peg$parseterm","peg$parsenumber","peg$parsename_start_char","peg$parsename_char","require$$0","SyntaxError","parse","SymbolTable","statements","externalSymbols","variables","symbols","main","addExternalSymbols","process","statement","processExpression","expr","END_MARKER","buildDFA","root","numSymbols","failState","State","initialState","dstates","marked","u","positions","ux","transitions","len","Uint16Array","accepting","tags","INITIAL_STATE","FAIL_STATE","StateMachine","dfa","stateTable","str","self","Symbol","iterator","state","startRun","lastAccepting","lastState","c","actions","match","tag","string","ast","grammar","build","symbolTable","states","map","from","compile"],"mappings":"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"}